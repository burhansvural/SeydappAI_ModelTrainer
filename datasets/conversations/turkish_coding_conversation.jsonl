{"instruction": "Python'da fibonacci fonksiyonu nasıl yazılır?", "input": "", "output": "Fibonacci fonksiyonu recursive veya iterative olarak yazılabilir:\n\n```python\n# Recursive version\ndef fibonacci_recursive(n):\n    if n <= 1:\n        return n\n    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n\n# Iterative version (daha efficient)\ndef fibonacci_iterative(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n```"}
{"instruction": "RTX 3060 için PyTorch model optimize et", "input": "model = AutoModel.from_pretrained('large-model')", "output": "RTX 3060 12GB için optimizasyon:\n\n```python\nfrom transformers import BitsAndBytesConfig\n\n# 4-bit quantization (1.8GB memory kullanımı)\nconfig = BitsAndBytesConfig(\n    load_in_4bit=True,\n    bnb_4bit_compute_dtype=torch.bfloat16,\n    bnb_4bit_quant_type='nf4'\n)\n\nmodel = AutoModel.from_pretrained(\n    'large-model',\n    quantization_config=config,\n    device_map='auto'\n)\n```"}
{"instruction": "Liste comprehension ile dosya filtreleme", "input": "", "output": "Python liste comprehension ile dosya filtreleme:\n\n```python\nimport os\nfrom pathlib import Path\n\n# .py dosyalarını filtrele\npy_files = [f for f in os.listdir('.') if f.endswith('.py')]\n\n# Path objesi ile\npy_files = [f.name for f in Path('.').iterdir() if f.suffix == '.py']\n\n# Boyut kontrolü ile\nlarge_files = [f for f in Path('.').iterdir() if f.stat().st_size > 1024]\n```"}
