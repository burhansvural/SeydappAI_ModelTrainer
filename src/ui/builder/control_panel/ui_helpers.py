# src/ui/builder/control_panel/ui_helpers.py
"""
üõ†Ô∏è UI Helpers - Control Panel i√ßin Yardƒ±mcƒ± UI Fonksiyonlarƒ±
Bu dosya UI update'leri ve error handling i√ßin utility fonksiyonlarƒ± saƒülar
"""

import flet as ft
import logging
from typing import Optional, Callable, Any

logger = logging.getLogger(__name__)


class UIHelpers:
    """
    UI operations i√ßin static helper method'lar saƒülayan sƒ±nƒ±f[1]

    Static method'lar[1]:
    - Sƒ±nƒ±f instance'ƒ±na ihtiya√ß duymaz
    - @staticmethod dekorat√∂r√º ile tanƒ±mlanƒ±r
    - Utility functions i√ßin idealdir
    """

    @staticmethod
    def safe_update_text(text_widget: Optional[ft.Text], new_value: str, color: Optional[str] = None):
        """
        Text widget'ƒ±nƒ± g√ºvenli ≈üekilde g√ºncelleyen static method[1]

        Args:
            text_widget: G√ºncellenecek text widget
            new_value: Yeni text deƒüeri
            color: Yeni renk (isteƒüe baƒülƒ±)
        """
        try:
            if text_widget:
                text_widget.value = new_value
                if color:
                    text_widget.color = color
                if hasattr(text_widget, 'update'):
                    text_widget.update()
        except Exception as e:
            logger.debug(f"Text update error: {e}")

    @staticmethod
    def safe_update_progress(progress_widget: Optional[ft.ProgressBar], value: float):
        """
        Progress bar'ƒ± g√ºvenli ≈üekilde g√ºncelleyen static method

        Args:
            progress_widget: G√ºncellenecek progress bar
            value: Yeni progress deƒüeri (0.0 - 1.0)
        """
        try:
            if progress_widget:
                # Value validation
                clamped_value = max(0.0, min(1.0, value))
                progress_widget.value = clamped_value
                if hasattr(progress_widget, 'update'):
                    progress_widget.update()
        except Exception as e:
            logger.debug(f"Progress update error: {e}")

    @staticmethod
    def safe_enable_disable_button(button_widget: Optional[ft.Container], enabled: bool):
        """
        Button'ƒ± g√ºvenli ≈üekilde enable/disable eden static method

        Args:
            button_widget: G√ºncellenecek button container
            enabled: Enable durumu (True/False)
        """
        try:
            if button_widget:
                button_widget.disabled = not enabled
                if hasattr(button_widget, 'update'):
                    button_widget.update()
        except Exception as e:
            logger.debug(f"Button update error: {e}")

    @staticmethod
    def create_error_dialog(page: ft.Page, title: str, message: str) -> ft.AlertDialog:
        """
        Error dialog olu≈üturan static method

        Args:
            page: Flet page referansƒ±
            title: Dialog ba≈ülƒ±ƒüƒ±
            message: Error mesajƒ±

        Returns:
            ft.AlertDialog: Olu≈üturulan error dialog
        """
        try:
            dialog = ft.AlertDialog(
                title=ft.Text(title),
                content=ft.Text(message),
                actions=[
                    ft.TextButton(
                        "Tamam",
                        on_click=lambda e: page.close_dialog()
                    )
                ]
            )
            return dialog
        except Exception as e:
            logger.error(f"Error dialog creation failed: {e}")
            return None

    @staticmethod
    def show_success_snackbar(page: ft.Page, message: str):
        """
        Success snackbar g√∂steren static method

        Args:
            page: Flet page referansƒ±
            message: Success mesajƒ±
        """
        try:
            snackbar = ft.SnackBar(
                content=ft.Text(message, color=ft.Colors.WHITE),
                bgcolor=ft.Colors.GREEN_400
            )
            page.snack_bar = snackbar
            page.snack_bar.open = True
            page.update()
        except Exception as e:
            logger.debug(f"Success snackbar error: {e}")

    @staticmethod
    def show_error_snackbar(page: ft.Page, message: str):
        """
        Error snackbar g√∂steren static method

        Args:
            page: Flet page referansƒ±
            message: Error mesajƒ±
        """
        try:
            snackbar = ft.SnackBar(
                content=ft.Text(message, color=ft.Colors.WHITE),
                bgcolor=ft.Colors.RED_400
            )
            page.snack_bar = snackbar
            page.snack_bar.open = True
            page.update()
        except Exception as e:
            logger.debug(f"Error snackbar error: {e}")


class UIAnimations:
    """
    UI animasyonlarƒ± i√ßin helper sƒ±nƒ±fƒ±[1]
    """

    @staticmethod
    def create_pulse_animation() -> ft.Animation:
        """Pulse animasyonu olu≈üturan static method"""
        return ft.Animation(1000, ft.AnimationCurve.EASE_IN_OUT)

    @staticmethod
    def create_fade_animation() -> ft.Animation:
        """Fade animasyonu olu≈üturan static method"""
        return ft.Animation(500, ft.AnimationCurve.EASE_IN)
